class WebsiteSaleSearchExtra(http.Controller):

    def _get_search_domain(self, search):
        # TODO: add category and attributes
        domain = request.website.sale_product_domain()
        if search:
            for srch in search.split(" "):
                domain += [
                    '|', '|', '|', '|', ('name', 'ilike', srch), ('description', 'ilike', srch),
                    ('description_sale', 'ilike', srch), ('product_variant_ids.default_code', 'ilike', srch),
                    ('website_description', 'ilike', srch),
                ]
        return domain

    #@http.route(['/shop/search'], type='json', auth="public", methods=['POST'], website=True)
    @http.route(
        '/search/autocomplete',
        type='http',
        auth='public',
        methods=['GET'],
        website=True,
    )    
    def search(self, query='', **kw):
        context = request.context

        domain = self._get_search_domain(query)
       

        product_obj = http.request.env['product.template']
        product_count = product_obj.with_context(context).search_count(domain)
        products = product_obj.with_context(context).search(domain)

        data = []
        for product in products:
            data.append({
                'product': product.name
            })
        #pdb.set_trace()
        data = {
            "product": [
                "Option 1",
                "Option 2",
                "Option 3",
                "Option 4",
                "Option 5"
            ]
        }
        return json.dumps(data)
