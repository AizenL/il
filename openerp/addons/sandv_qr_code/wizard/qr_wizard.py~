# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
import time

from openerp.osv import fields, osv
from openerp.tools.translate import _
import random
class qr_wizard(osv.osv_memory):
    _name = "qr.wizard"


    def fields_view_get(self, cr, uid, view_id=None, view_type='form',
                        context=None, toolbar=False, submenu=False):
        if context is None:
            context={}
        res = super(qr_wizard, self).fields_view_get(cr, uid, view_id=view_id, view_type=view_type, context=context, toolbar=toolbar,submenu=False)
        return res

    def do_generate(self, cr, uid, ids, context=None):
        product_obj = self.pool.get('product.master')
        mod_obj =self.pool.get('ir.model.data')
        if context is None:
            context = {}
        result = mod_obj._get_id(cr, uid, 'sandv_qr_code', 'product_master_search_view')
        id = mod_obj.read(cr, uid, result, ['res_id'])

        allorders = product_obj.action_generate_qr(cr, uid, context.get('active_ids',[]), context)

class scan_qr_code(osv.osv_memory):
    _name = "scan.qr.code"

    def do_scan(self, cr, uid, ids, context=None):
        res_id = 0
        view_id = 0
        for val in self.browse(cr, uid, ids, context=context):
                res_id = random.sample(range(1, 50), 1)
                view_ref = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'sandv_qr_code', 'product_master_form_view')
                view_id = view_ref and view_ref[1] or False,

        return {
            'type': 'ir.actions.act_window',
            'name': _('PO'),
            'res_model': 'product.master',
            'res_id': res_id[0],
            'view_type': 'form',
            'view_mode': 'form',
            'view_id': view_id,
            'target': 'current',
            'nodestroy': True,
        }

